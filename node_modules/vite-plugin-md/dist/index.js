var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default
});
var import_pluginutils = __toModule(require("@rollup/pluginutils"));

// src/markdown.ts
var import_markdown_it = __toModule(require("markdown-it"));
var import_gray_matter = __toModule(require("gray-matter"));
var import_utils = __toModule(require("@antfu/utils"));
var scriptSetupRE = /<\s*script[^>]*\bsetup\b[^>]*>([\s\S]*)<\/script>/mg;
var defineExposeRE = /defineExpose\s*\(/mg;
function extractScriptSetup(html) {
  const scripts = [];
  html = html.replace(scriptSetupRE, (_, script) => {
    scripts.push(script);
    return "";
  });
  return { html, scripts };
}
function extractCustomBlock(html, options) {
  const blocks = [];
  for (const tag of options.customSfcBlocks) {
    html = html.replace(new RegExp(`<${tag}[^>]*\\b[^>]*>[^<>]*<\\/${tag}>`, "mg"), (code) => {
      blocks.push(code);
      return "";
    });
  }
  return { html, blocks };
}
function createMarkdown(options) {
  const isVue2 = options.vueVersion.startsWith("2.");
  const markdown = new import_markdown_it.default(__spreadValues({
    html: true,
    linkify: true,
    typographer: true
  }, options.markdownItOptions));
  markdown.linkify.set({ fuzzyLink: false });
  options.markdownItUses.forEach((e) => {
    const [plugin, options2] = (0, import_utils.toArray)(e);
    markdown.use(plugin, options2);
  });
  options.markdownItSetup(markdown);
  return (id, raw) => {
    const { wrapperClasses, wrapperComponent, transforms, headEnabled, frontmatterPreprocess } = options;
    raw = raw.trimStart();
    if (transforms.before)
      raw = transforms.before(raw, id);
    if (options.excerpt && !options.grayMatterOptions.excerpt)
      options.grayMatterOptions.excerpt = true;
    const grayMatterFile = options.frontmatter ? (0, import_gray_matter.default)(raw, options.grayMatterOptions) : { content: raw, data: null, excerpt: "" };
    const { content: md, data } = grayMatterFile;
    const excerpt = grayMatterFile.excerpt === void 0 ? "" : grayMatterFile.excerpt;
    let html = markdown.render(md, { id });
    if (wrapperClasses)
      html = `<div class="${wrapperClasses}">${html}</div>`;
    else
      html = `<div>${html}</div>`;
    if (wrapperComponent)
      html = `<${wrapperComponent}${options.frontmatter ? ' :frontmatter="frontmatter"' : ""}${options.excerpt ? ' :excerpt="excerpt"' : ""}>${html}</${wrapperComponent}>`;
    if (transforms.after)
      html = transforms.after(html, id);
    if (options.escapeCodeTagInterpolation) {
      html = html.replace(/<code(.*?)>/g, "<code$1 v-pre>");
    }
    const hoistScripts = extractScriptSetup(html);
    html = hoistScripts.html;
    const customBlocks = extractCustomBlock(html, options);
    html = customBlocks.html;
    const scriptLines = [];
    let frontmatterExportsLines = [];
    let excerptExportsLine = "";
    let excerptKeyOverlapping = false;
    if (options.frontmatter) {
      if (options.excerpt && data) {
        if (data.excerpt !== void 0)
          excerptKeyOverlapping = true;
        data.excerpt = excerpt;
      }
      const { head, frontmatter } = frontmatterPreprocess(data || {}, options);
      if (options.excerpt && !excerptKeyOverlapping && frontmatter.excerpt !== void 0)
        delete frontmatter.excerpt;
      scriptLines.push(`const frontmatter = ${JSON.stringify(frontmatter)}`);
      frontmatterExportsLines = Object.entries(frontmatter).map(([key, value]) => `export const ${key} = ${JSON.stringify(value)}`);
      if (!isVue2 && options.exposeFrontmatter && !defineExposeRE.test(hoistScripts.scripts.join("")))
        scriptLines.push("defineExpose({ frontmatter })");
      if (!isVue2 && headEnabled && head) {
        scriptLines.push(`const head = ${JSON.stringify(head)}`);
        scriptLines.unshift('import { useHead } from "@vueuse/head"');
        scriptLines.push("useHead(head)");
      }
    }
    if (options.excerpt) {
      scriptLines.push(`const excerpt = ${JSON.stringify(excerpt)}`);
      if (!excerptKeyOverlapping)
        excerptExportsLine = `export const excerpt = ${JSON.stringify(excerpt)}
`;
      if (!isVue2 && options.exposeExcerpt && !defineExposeRE.test(hoistScripts.scripts.join("")))
        scriptLines.push("defineExpose({ excerpt })");
    }
    scriptLines.push(...hoistScripts.scripts);
    const scripts = isVue2 ? `<script>
${scriptLines.join("\n")}
${frontmatterExportsLines.join("\n")}
${excerptExportsLine}export default { data() { return { frontmatter } } }
<\/script>` : `<script setup>
${scriptLines.join("\n")}
<\/script>${frontmatterExportsLines.length ? `
<script>
${frontmatterExportsLines.join("\n")}
<\/script>` : ""}${excerptExportsLine !== "" ? `
<script>
${excerptExportsLine}<\/script>` : ""}`;
    const sfc = `<template>${html}</template>
${scripts}
${customBlocks.blocks.join("\n")}
`;
    return sfc;
  };
}

// src/options.ts
var import_utils2 = __toModule(require("@antfu/utils"));

// src/head.ts
var headProperties = [
  "title",
  "meta",
  "link",
  "base",
  "style",
  "script",
  "htmlAttrs",
  "bodyAttrs"
];
function preprocessHead(frontmatter, options) {
  if (!options.headEnabled)
    return frontmatter;
  const head = options.headField ? frontmatter[options.headField] || {} : frontmatter;
  const meta = head.meta = head.meta || [];
  if (head.title) {
    if (!meta.find((i) => i.property === "og:title"))
      meta.push({ property: "og:title", content: head.title });
  }
  if (head.description) {
    if (!meta.find((i) => i.property === "og:description"))
      meta.push({ property: "og:description", content: head.description });
    if (!meta.find((i) => i.name === "description"))
      meta.push({ name: "description", content: head.description });
  }
  if (head.image) {
    if (!meta.find((i) => i.property === "og:image"))
      meta.push({ property: "og:image", content: head.image });
    if (!meta.find((i) => i.property === "twitter:card"))
      meta.push({ name: "twitter:card", content: "summary_large_image" });
  }
  const result = {};
  for (const [key, value] of Object.entries(head)) {
    if (headProperties.includes(key))
      result[key] = value;
  }
  return Object.entries(result).length === 0 ? null : result;
}

// src/utils.ts
function getVueVersion(defaultVersion = "3.2.0") {
  try {
    let v = require("vue");
    if (v.default)
      v = v.default;
    return v.version || defaultVersion;
  } catch (e) {
    return defaultVersion;
  }
}

// src/options.ts
function resolveOptions(userOptions) {
  const options = Object.assign({
    headEnabled: false,
    headField: "",
    frontmatter: true,
    excerpt: false,
    exposeFrontmatter: true,
    exposeExcerpt: false,
    escapeCodeTagInterpolation: true,
    customSfcBlocks: ["route", "i18n", "style"],
    markdownItOptions: {},
    markdownItUses: [],
    markdownItSetup: () => {
    },
    grayMatterOptions: {},
    wrapperClasses: "markdown-body",
    wrapperComponent: null,
    transforms: {},
    frontmatterPreprocess: (frontmatter, options2) => {
      const head = preprocessHead(frontmatter, options2);
      return { head, frontmatter };
    }
  }, userOptions);
  options.wrapperClasses = (0, import_utils2.toArray)(options.wrapperClasses).filter((i) => i).join(" ");
  options.vueVersion = options.vueVersion || getVueVersion();
  return options;
}

// src/index.ts
function VitePluginMarkdown(userOptions = {}) {
  const options = resolveOptions(userOptions);
  const markdownToVue = createMarkdown(options);
  const filter = (0, import_pluginutils.createFilter)(userOptions.include || /\.md$/, userOptions.exclude);
  return {
    name: "vite-plugin-md",
    enforce: "pre",
    transform(raw, id) {
      if (!filter(id))
        return;
      try {
        return markdownToVue(id, raw);
      } catch (e) {
        this.error(e);
      }
    },
    async handleHotUpdate(ctx) {
      if (!filter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async function() {
        return markdownToVue(ctx.file, await defaultRead());
      };
    }
  };
}
var src_default = VitePluginMarkdown;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
