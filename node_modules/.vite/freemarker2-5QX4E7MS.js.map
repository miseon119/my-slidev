{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/freemarker2/freemarker2.ts\nvar EMPTY_ELEMENTS = [\n  \"assign\",\n  \"flush\",\n  \"ftl\",\n  \"return\",\n  \"global\",\n  \"import\",\n  \"include\",\n  \"break\",\n  \"continue\",\n  \"local\",\n  \"nested\",\n  \"nt\",\n  \"setting\",\n  \"stop\",\n  \"t\",\n  \"lt\",\n  \"rt\",\n  \"fallback\"\n];\nvar BLOCK_ELEMENTS = [\n  \"attempt\",\n  \"autoesc\",\n  \"autoEsc\",\n  \"compress\",\n  \"comment\",\n  \"escape\",\n  \"noescape\",\n  \"function\",\n  \"if\",\n  \"list\",\n  \"items\",\n  \"sep\",\n  \"macro\",\n  \"noparse\",\n  \"noParse\",\n  \"noautoesc\",\n  \"noAutoEsc\",\n  \"outputformat\",\n  \"switch\",\n  \"visit\",\n  \"recurse\"\n];\nvar TagSyntaxAngle = {\n  close: \">\",\n  id: \"angle\",\n  open: \"<\"\n};\nvar TagSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open: \"\\\\[\"\n};\nvar TagSyntaxAuto = {\n  close: \"[>\\\\]]\",\n  id: \"auto\",\n  open: \"[<\\\\[]\"\n};\nvar InterpolationSyntaxDollar = {\n  close: \"\\\\}\",\n  id: \"dollar\",\n  open1: \"\\\\$\",\n  open2: \"\\\\{\"\n};\nvar InterpolationSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open1: \"\\\\[\",\n  open2: \"=\"\n};\nfunction createLangConfiguration(ts) {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    comments: {\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\n    },\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createLangConfigurationAuto() {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createMonarchLanguage(ts, is) {\n  const id = `_${ts.id}_${is.id}`;\n  const s = (name) => name.replace(/__id__/g, id);\n  const r = (regexp) => {\n    const source = regexp.source.replace(/__id__/g, id);\n    return new RegExp(source, regexp.flags);\n  };\n  return {\n    unicode: true,\n    includeLF: false,\n    start: s(\"default__id__\"),\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    [s(\"open__id__\")]: new RegExp(ts.open),\n    [s(\"close__id__\")]: new RegExp(ts.close),\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\n    [s(\"iClose__id__\")]: new RegExp(is.close),\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\n    blank: /[ \\t\\n\\r]/,\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\n    asciiDigit: /[0-9]/,\n    integer: /[0-9]+/,\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    escapedIdChar: /\\\\[\\-\\.:#]/,\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\n    arrows: [\"->\", \"-&gt;\"],\n    delimiters: [\";\", \":\", \",\", \".\"],\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\n    tokenizer: {\n      [s(\"default__id__\")]: [\n        { include: s(\"@directive_token__id__\") },\n        { include: s(\"@interpolation_and_text_token__id__\") }\n      ],\n      [s(\"fmExpression__id__.directive\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"fmExpression__id__.interpolation\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      [s(\"inParen__id__.plain\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"inParen__id__.gt\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      [s(\"noSpaceExpression__id__\")]: [\n        { include: s(\"@no_space_expression_end_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\n      [s(\"directive_token__id__\")]: [\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            {\n              cases: {\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\n                \"@default\": { token: \"tag\" }\n              }\n            },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ],\n        [\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(@open__id__)(@)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\n          ]\n        ],\n        [\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\n          [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        [\n          r(/(@open__id__)#--/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\n        ],\n        [\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ]\n      ],\n      [s(\"interpolation_and_text_token__id__\")]: [\n        [\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\n          [\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\n            {\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\n              next: s(\"@fmExpression__id__.interpolation\")\n            }\n          ]\n        ],\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\n      ],\n      [s(\"string_single_token__id__\")]: [\n        [/[^'\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/'/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_token__id__\")]: [\n        [/[^\"\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/\"/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_single_raw_token__id__\")]: [\n        [/[^']+/, { token: \"string.raw\" }],\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_raw_token__id__\")]: [\n        [/[^\"]+/, { token: \"string.raw\" }],\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"expression_token__id__\")]: [\n        [\n          /(r?)(['\"])/,\n          {\n            cases: {\n              \"r'\": [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\n              ],\n              'r\"': [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\n              ],\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\n            }\n          }\n        ],\n        [\n          /(?:@integer)(?:\\.(?:@integer))?/,\n          {\n            cases: {\n              \"(?:@integer)\": { token: \"number\" },\n              \"@default\": { token: \"number.float\" }\n            }\n          }\n        ],\n        [\n          /(\\.)(@blank*)(@specialHashKeys)/,\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\n        ],\n        [\n          /(?:@namedSymbols)/,\n          {\n            cases: {\n              \"@arrows\": { token: \"meta.arrow\" },\n              \"@delimiters\": { token: \"delimiter\" },\n              \"@default\": { token: \"operators\" }\n            }\n          }\n        ],\n        [\n          /@id/,\n          {\n            cases: {\n              \"@keywords\": { token: \"keyword.$0\" },\n              \"@stringOperators\": { token: \"operators\" },\n              \"@default\": { token: \"identifier\" }\n            }\n          }\n        ],\n        [\n          /[\\[\\]\\(\\)\\{\\}]/,\n          {\n            cases: {\n              \"\\\\[\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\]\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  } : {},\n                  ...ts.id === \"bracket\" ? {\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\n                  } : {},\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n              \"\\\\)\": {\n                cases: {\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\{\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\}\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {} : {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  },\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              }\n            }\n          }\n        ],\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\n      ],\n      [s(\"blank_and_expression_comment_token__id__\")]: [\n        [/(?:@blank)+/, { token: \"\" }],\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\n      ],\n      [s(\"directive_end_token__id__\")]: [\n        [\n          />/,\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\n        ],\n        [\n          r(/(\\/)(@close__id__)/),\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\n        ]\n      ],\n      [s(\"greater_operators_token__id__\")]: [\n        [/>/, { token: \"operators\" }],\n        [/>=/, { token: \"operators\" }]\n      ],\n      [s(\"no_space_expression_end_token__id__\")]: [\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\n      ],\n      [s(\"unified_call_token__id__\")]: [\n        [\n          /(@id)((?:@blank)+)/,\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\n        ],\n        [\n          r(/(@id)(\\/?)(@close__id__)/),\n          [\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\", next: \"@popall\" }\n          ]\n        ],\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\n      ],\n      [s(\"no_parse_token__id__\")]: [\n        [\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\n          {\n            cases: {\n              \"$S2==$3\": [\n                { token: \"@brackets.directive\" },\n                { token: \"delimiter.directive\" },\n                { token: \"tag\" },\n                { token: \"\" },\n                { token: \"@brackets.directive\", next: \"@popall\" }\n              ],\n              \"$S2==comment\": [\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" }\n              ],\n              \"@default\": [\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" }\n              ]\n            }\n          }\n        ],\n        [\n          /[^<\\[\\-]+|[<\\[\\-]/,\n          {\n            cases: {\n              \"$S2==comment\": { token: \"comment\" },\n              \"@default\": { token: \"source\" }\n            }\n          }\n        ]\n      ],\n      [s(\"expression_comment_token__id__\")]: [\n        [\n          /--[>\\]]/,\n          {\n            token: \"comment\",\n            next: \"@pop\"\n          }\n        ],\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\n      ],\n      [s(\"terse_comment_token__id__\")]: [\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\n      ]\n    }\n  };\n}\nfunction createMonarchLanguageAuto(is) {\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\n  return {\n    ...angle,\n    ...bracket,\n    ...auto,\n    unicode: true,\n    includeLF: false,\n    start: `default_auto_${is.id}`,\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    tokenizer: {\n      ...angle.tokenizer,\n      ...bracket.tokenizer,\n      ...auto.tokenizer\n    }\n  };\n}\nvar TagAngleInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\n};\nvar TagBracketInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\n};\nvar TagAngleInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\n};\nvar TagBracketInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\n};\nvar TagAutoInterpolationDollar = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\n};\nvar TagAutoInterpolationBracket = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\n};\nexport {\n  TagAngleInterpolationBracket,\n  TagAngleInterpolationDollar,\n  TagAutoInterpolationBracket,\n  TagAutoInterpolationDollar,\n  TagBracketInterpolationBracket,\n  TagBracketInterpolationDollar\n};\n"],
  "mappings": "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",
  "names": []
}
