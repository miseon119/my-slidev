import { DirectiveTransform } from '@vue/compiler-core';
import { M as MotionVariants } from './value-8f0f6618';
import '@vueuse/core';
import 'vue-demi';

declare function transform(variants?: MotionVariants): DirectiveTransform;

interface EvaluateReturn {
    status: 'ok' | 'ng';
    value?: unknown;
}
declare type NestedValue<T> = {
    [P in keyof T]: NestedValue<T[P]>;
};
declare type TranslationParams<T = Record<string, unknown>> = {
    path: string;
    named: NestedValue<T>;
    options: {
        locale?: string;
        plural?: string;
    };
};
declare function evaluateValue(expression: string): EvaluateReturn;
declare function parseExpression(expression: string): TranslationParams;

export { TranslationParams, evaluateValue, parseExpression, transform };
